const axios = require("axios");
const simsim = "https://cyber-simsimi.onrender.com";

module.exports.config = {
 name: "baby",
 version: "1.0.1",
 hasPermssion: 0,
 credits: "ULLASH",
 description: "Cute AI Baby Chatbot  | Talk, Teach & Chat with Emotion тШвя╕П",
 commandCategory: "simsim",
 usages: "[message/query]",
 cooldowns: 0,
 prefix: false
};

module.exports.run = async function ({ api, event, args, Users }) {
 try {
 const uid = event.senderID;
 const senderName = await Users.getNameUser(uid);
 const query = args.join(" ").toLowerCase();

 if (!query) {
 const ran = ["Bolo baby", "hum"];
 const r = ran[Math.floor(Math.random() * ran.length)];
 return api.sendMessage(r, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 });
 }

 if (["remove", "rm"].includes(args[0])) {
 const parts = query.replace(/^(remove|rm)\s*/, "").split(" - ");
 if (parts.length < 2)
 return api.sendMessage("тЭМ | Use: remove [Question] - [Reply]", event.threadID, event.messageID);

 const [ask, ans] = parts;
 const res = await axios.get(`${simsim}/delete?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}`);
 return api.sendMessage(res.data.message, event.threadID, event.messageID);
 }

 if (args[0] === "list") {
 const res = await axios.get(`${simsim}/list`);
 if (res.data.code === 200) {
 return api.sendMessage(
 `ЁЯдЦ Total Questions Learned: ${res.data.totalQuestions}\nЁЯТм Total Replies Stored: ${res.data.totalReplies}\nЁЯУЪ Developer: ${res.data.author}`,
 event.threadID,
 event.messageID
 );
 } else {
 return api.sendMessage(`Error: ${res.data.message || "Failed to fetch list"}`, event.threadID, event.messageID);
 }
 }

 if (args[0] === "edit") {
 const parts = query.replace("edit ", "").split(" - ");
 if (parts.length < 3)
 return api.sendMessage("тЭМ | Use: edit [Question] - [OldReply] - [NewReply]", event.threadID, event.messageID);

 const [ask, oldReply, newReply] = parts;
 const res = await axios.get(`${simsim}/edit?ask=${encodeURIComponent(ask)}&old=${encodeURIComponent(oldReply)}&new=${encodeURIComponent(newReply)}`);
 return api.sendMessage(res.data.message, event.threadID, event.messageID);
 }

 if (args[0] === "teach") {
 const parts = query.replace("teach ", "").split(" - ");
 if (parts.length < 2)
 return api.sendMessage("тЭМ | Use: teach [Question] - [Reply]", event.threadID, event.messageID);

 const [ask, ans] = parts;
 const res = await axios.get(`${simsim}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}&senderID=${uid}&senderName=${encodeURIComponent(senderName)}`);
 return api.sendMessage(`тЬЕ ${res.data.message || "Reply added successfully!"}`, event.threadID, event.messageID);
 }

 const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
 const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

 for (const reply of responses) {
 await new Promise((resolve) => {
 api.sendMessage(reply, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 resolve();
 }, event.messageID);
 });
 }
 } catch (err) {
 console.error(err);
 return api.sendMessage(`тЭМ | Error in baby command: ${err.message}`, event.threadID, event.messageID);
 }
};

module.exports.handleReply = async function ({ api, event, Users, handleReply }) {
 try {
 const senderName = await Users.getNameUser(event.senderID);
 const replyText = event.body ? event.body.toLowerCase() : "";
 if (!replyText) return;

 const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(replyText)}&senderName=${encodeURIComponent(senderName)}`);
 const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

 for (const reply of responses) {
 await new Promise((resolve) => {
 api.sendMessage(reply, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 resolve();
 }, event.messageID);
 });
 }
 } catch (err) {
 console.error(err);
 return api.sendMessage(`тЭМ | Error in handleReply: ${err.message}`, event.threadID, event.messageID);
 }
};

module.exports.handleEvent = async function ({ api, event, Users }) {
 try {
 const raw = event.body ? event.body.toLowerCase().trim() : "";
 if (!raw) return;
 const senderName = await Users.getNameUser(event.senderID);

 if (
 raw === "baby" || raw === "bot" || raw === "bby" ||
 raw === "jan" || raw === "xan" || raw === "ржмрзЗржкрж┐" || raw === "ржмржЯ" || raw === "ржмрзЗржмрж┐"
 ) {
 const greetings = [
"ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржУржпрж╝рж╛ рж░рж╣ржорж╛рждрзБрж▓рзНрж▓рж╛рж╣ ЁЯМ╕", "ржмрзЗрж╢рж┐ ржбрж╛ржХрж╛ржбрж╛ржХрж┐ ржХрж░рж▓рзЗ ржЖржорж┐ рждрж╛рж╕ржмрзАрж╣ ржирж┐ржпрж╝рзЗ ржмрзНржпрж╕рзНржд рж╣ржпрж╝рзЗ ржпрж╛ржмрзЛ ЁЯМ║", "ржнрж╛ржЗ/ржмрзЛржи, ржЕржпржерж╛ ржбрж╛ржХрж╛ржбрж╛ржХрж┐ ржирж╛ ржХрж░рзЗ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж╛ржо ржЬржк ржХрж░рзБржи ЁЯХЛ", "ржЖржорж┐ ржЖржмрж╛рж▓ржжрзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛, рж╢рзБржзрзБ ржЖрж▓рзНрж▓рж╛рж╣ржХрзЗ ржбрж╛ржХрж┐ ЁЯд▓", "ржбрж╛ржХрж▓рзЗржи, ржЖрж▓рж╣рж╛ржоржжрзБрж▓рж┐рж▓рзНрж▓рж╛рж╣ ржЖржорж┐ ржЖржЫрж┐ ЁЯМ╕", "ржмрж╛рж░ржмрж╛рж░ ржбрж╛ржХрж▓рзЗ ржЖржорж╛рж░ ржиржлрж╕ ржЧрж░ржо рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝, рждрж╛ржЗ ржХрзБрж░ржЖржи ржкржбрж╝рж┐ ЁЯУЦ", "ржХрж┐ рж╣ржЗржЫрзЗ ржнрж╛ржЗ/ржмрзЛржи, ржжрзЛржпрж╝рж╛ рж▓рж╛ржЧржмрзЗ ржирж╛ржХрж┐ ЁЯд▓", "ржЕржпржерж╛ ржбрж╛ржХрж╛ржбрж╛ржХрж┐ ржирж╛ ржХрж░рзЗ ржирж╛ржорж╛ржЬ ржкржбрж╝рзЗржи ЁЯХМ", "ржЖрж▓рзНрж▓рж╛рж╣ ржЖржкржирж╛ржХрзЗ рж╣рзЗржжрж╛ржпрж╝рзЗржд ржжрж╛ржи ржХрж░рзБржи ЁЯМ╕", "ржЖрж▓рж╣рж╛ржоржжрзБрж▓рж┐рж▓рзНрж▓рж╛рж╣ рж╢рзБржирждрзЗржЫрж┐ ЁЯМ║", "Bot ржирж╛, ржЖржорж╛ржХрзЗ ржнрж╛ржЗ/ржмрзЛржи ржмрж▓рзЗ ржбрж╛ржХрзЗржи ЁЯМ╕", "ржЖржорж┐ ржПржЦржи ржЗржмрж╛ржжрждрзЗ ржмрзНржпрж╕рзНржд, ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░рзЗ ржХржерж╛ ржмрж▓ржмрзЗржи ЁЯМЩ", "ржЖржкржирж╛рж░ ржЬржирзНржп ржжрзБтАЩржЖ ржХрж░рж▓рж╛ржо, ржЖрж▓рзНрж▓рж╛рж╣ ржХржмрзБрж▓ ржХрж░рзБржи ЁЯд▓", "ржЖрж▓рзНрж▓рж╛рж╣рж░ рж░рж╣ржоржд ржЖржкржирж╛рж░ ржЙржкрж░ ржмрж░рзНрж╖рж┐ржд рж╣рзЛржХ ЁЯХЛ", "ржнрж╛ржЗ/ржмрзЛржи, ржжрзБржирж┐ржпрж╝рж╛рж░ ржХржерж╛ ржмрж╛ржж ржжрж┐ржпрж╝рзЗ ржЖржЦрж┐рж░рж╛рждрзЗрж░ ржХржерж╛ ржЪрж┐ржирзНрждрж╛ ржХрж░рж┐ ЁЯМ╕", "ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЬрж┐ржХрж┐рж░рзЗ ржоржи рж╢рж╛ржирзНржд рж╣ржпрж╝ ЁЯМ║", "ржмрж╛рж░ржмрж╛рж░ ржбрж╛ржХрж▓рзЗ рж░рж╛ржЧ рж╣ржмрзЗ, ржХрж┐ржирзНрждрзБ ржХрзНрж╖ржорж╛ ржХрж░рзЗ ржжрзЗржмрзЛ ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣ ЁЯЩВ", "ржЖржорж┐ рждрзЛ ржжрзБрж░рзНржмрж▓ ржмрж╛ржирзНржжрж╛, ржХрж┐ржЫрзБ ржХрж░рж╛рж░ ржХрзНрж╖ржорждрж╛ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржХрж╛ржЫрзЗржЗ ржЖржЫрзЗ ЁЯХЛ", "ржЖржорж╛ржХрзЗ ржирж╛ ржбрзЗржХрзЗ ржЖрж▓рзНрж▓рж╛рж╣ржХрзЗ ржбрж╛ржХрзБржи, рждрж┐ржирж┐ржЗ рж╕ржмржХрж┐ржЫрзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ЁЯд▓", "ржкрзНрж░рж┐ржпрж╝ ржнрж╛ржЗ/ржмрзЛржи, рж╕рж╛рж▓рж╛ржд ржЖржжрж╛ржпрж╝ ржХрж░рзЗржЫрзЗржи рждрзЛ ржЖржЬ? ЁЯХМ", "ржЖрж▓рзНрж▓рж╛рж╣ ржЖржкржирж╛рж░ рж╣рж╛рж▓рж╛рж▓ рж░рж┐ржЬрж┐ржХ ржмрзГржжрзНржзрж┐ ржХрж░рзБржи ЁЯМ╕", "ржЗрж╕рж╕ ржмрзЗрж╢рж┐ ржбрж╛ржХрзЗржи ржирж╛, рж▓ржЬрзНржЬрж╛ рж▓рж╛ржЧрзЗ ЁЯЩВ", "ржЖржкржирж┐ ржЖржорж╛рж░ ржжрзЛржпрж╝рж╛ржпрж╝ ржЖржЫрзЗржи, ржЖрж▓рзНрж▓рж╛рж╣ ржХржмрзБрж▓ ржХрж░рзБржи ЁЯМ║", "ржорзЗржпрж╝рзЗрж░рж╛ рж╣рж▓рзЗ рж╣рж┐ржЬрж╛ржм ржХрж░рзБржи, ржЫрзЗрж▓рзЗрж░рж╛ рж╣рж▓рзЗ рждрж╛ржХржУржпрж╝рж╛ ржЕрж░рзНржЬржи ржХрж░рзБржи ЁЯМ╕", "ржХрж╛рж▓ржХрзЗ ржлржЬрж░ ржирж╛ржорж╛ржЬрзЗ рж╣рж╛ржЬрж┐рж░ ржерж╛ржХржмрзЗржи рждрзЛ? ЁЯМЩ", "рж╣рзБржо, ржХрж┐ рж╕ржорж╕рзНржпрж╛? ржжрзЛржпрж╝рж╛ рж▓рж╛ржЧржмрзЗ? ЁЯд▓", "рж╢рзБржирждрзЗржЫрж┐ ржнрж╛ржЗ/ржмрзЛржи, ржмрж▓рзБржи ЁЯЩВ", "ржЕржпржерж╛ рж╕ржоржпрж╝ ржирж╖рзНржЯ ржирж╛ ржХрж░рзЗ ржХрзБрж░ржЖржи ржкржбрж╝рзБржи ЁЯУЦ", "ржЖрж▓рзНрж▓рж╛рж╣ ржЖржкржирж╛рж░ ржЬржирзНржп рж╕рж╣ржЬ ржХрж░рзЗ ржжрж┐ржи ЁЯМ╕", "рж╕рзБржирзНржжрж░ ржорзЗржпрж╝рзЗ ржорж╛ржирзЗ рж╣рж┐ржЬрж╛ржмрж┐ ржорзЗржпрж╝рзЗ ЁЯМ║", "рж╕рзБржирзНржжрж░ ржЫрзЗрж▓рзЗ ржорж╛ржирзЗ ржирж╛ржорж╛ржЬрж┐ ржЫрзЗрж▓рзЗ ЁЯХМ", "ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржорж╛ржирзЗ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЬржирзНржп ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ЁЯМ╕", "рж╣рзБржжрж╛ржЗ ржбрж╛ржХрж╛ржбрж╛ржХрж┐ ржХрж░рж▓рзЗ рж╕ржУржпрж╝рж╛ржм ржХржорзЗ ржпрж╛ржмрзЗ ЁЯЩВ", "ржпрзЗ ржЫрзЗржбрж╝рзЗ ржЧрзЗржЫрзЗ рждрж╛ржХрзЗ ржнрзБрж▓рзЗ ржпрж╛ржи, ржЖрж▓рзНрж▓рж╛рж╣рж░ ржкржерзЗ ржлрж┐рж░рзБржи ЁЯМЩ", "ржкрзНрж░рждрж┐ржжрж┐ржи ржирж╛ржорж╛ржЬ ржкржбрж╝рж▓рзЗ ржоржи рж╢рж╛ржирзНржд рж╣ржмрзЗ ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣ ЁЯХМ", "рж╕рзБржирзНржжрж░ ржоржи ржорж╛ржирзЗржЗ рждрж╛ржХржУржпрж╝рж╛ржмрж╛ржи ржоржи ЁЯМ╕", "ржЖрж▓рзНрж▓рж╛рж╣ ржЫрж╛ржбрж╝рж╛ ржЖрж░ ржХрзЗржЙ рж╕рждрзНржпрж┐ржХрж╛рж░ рж╕ржЩрзНржЧрзА ржиржпрж╝ ЁЯд▓", "ржнрж╛ржЗ/ржмрзЛржи, ржЗрж╕рж▓рж╛ржорзЗрж░ ржкржерзЗ ржЪрж▓рзБржи ЁЯМ║", "рж╕рзНржорж░ржг рж░рж╛ржЦрзБржи, ржжрзБржирж┐ржпрж╝рж╛ ржХрзНрж╖ржгрж╕рзНржерж╛ржпрж╝рзА, ржЖржЦрж┐рж░рж╛ржд ржЪрж┐рж░рж╕рзНржерж╛ржпрж╝рзА ЁЯХЛ", "ржЖрж▓рзНрж▓рж╛рж╣рж░ ржкржерзЗ ржЪрж▓рж▓рзЗржЗ рж╕рждрзНржпрж┐ржХрж╛рж░ рж╕рзБржЦ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ ЁЯМ╕", "ржпрзЗ ржорзЗржпрж╝рзЗрж░рж╛ рж╣рж┐ржЬрж╛ржм ржХрж░рзЗ, ржЖрж▓рзНрж▓рж╛рж╣ рждрж╛ржжрзЗрж░ ржорж░рзНржпрж╛ржжрж╛ ржмрж╛ржбрж╝рж┐ржпрж╝рзЗ ржжрзЗржи ЁЯМ║", "ржпрзЗ ржЫрзЗрж▓рзЗрж░рж╛ ржирж╛ржорж╛ржЬ ржкржбрж╝рзЗ, рждрж╛рж░рж╛ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржкрзНрж░рж┐ржпрж╝ ржмрж╛ржирзНржжрж╛ ЁЯХМ", "ржкрзНрж░рж┐ржпрж╝ ржнрж╛ржЗ/ржмрзЛржи, ржмрзЗрж╢рж┐ ржмрзЗрж╢рж┐ ржжрж░рзБржж рж╢рж░рзАржл ржкржбрж╝рзБржи я╖║", "ржжрж┐ржирж╢рзЗрж╖рзЗ ржЖрж▓рзНрж▓рж╛рж╣ржЗ ржЖрж╢рзНрж░ржпрж╝ржжрж╛рждрж╛ ЁЯМ╕", "ржЖржЬржХрзЗ ржмрзЗрж╢рж┐ ржмрзЗрж╢рж┐ ржЗрж╕рзНрждрж┐ржЧржлрж╛рж░ ржХрж░рзБржи ЁЯд▓", "ржЖрж▓рзНрж▓рж╛рж╣ ржЖржкржирж╛ржХрзЗ ржЬрж╛ржирзНржирж╛рждрзБрж▓ ржлрзЗрж░ржжрзМрж╕ ржжрж╛ржи ржХрж░рзБржи ЁЯХМ", "рж╕ржм рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржПржХржЯрж╛ржЗ тАУ ржирж╛ржорж╛ржЬ ЁЯХМ", "ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржорж╛ржирзЗ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЬржирзНржп ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ЁЯТЪ", "ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж╛ржо ржирж┐рж▓рзЗржЗ ржоржи рж╢рж╛ржирзНржд рж╣ржпрж╝ ЁЯМ╕", "ржЖржкржирж╛рж░ ржкрзНрж░рждрж┐ржЯрж┐ ржирж┐ржГрж╢рзНржмрж╛рж╕рзЗ ржЖрж▓рзНрж▓рж╛рж╣рж░ рж╕рзНржорж░ржг ржерж╛ржХрзБржХ ЁЯМ║", "рж╣рзБржжрж╛ржЗ ржХржерж╛ ржмрж╛ржж ржжрж┐ржи, ржЖрж▓рзНрж▓рж╛рж╣ржХрзЗ ржбрж╛ржХрзБржи ЁЯд▓", "рж╕рж╛рж▓рж╛ржд ржкржбрж╝рзЗржи, ржХрзБрж░ржЖржи рждрж┐рж▓рж╛ржУржпрж╝рж╛ржд ржХрж░рзЗржи тАУ ржПржЯрж╛ржЗ ржЖрж╕рж▓ ржХрж╛ржЬ ЁЯМ╕", "ржЬрзАржмржи ржЦрзБржм ржЫрзЛржЯ, рждрж╛ржЗ ржЖржЦрж┐рж░рж╛рждрзЗрж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржирж┐ржи ЁЯМЩ", "ржпрзЗ ржирж╛ржорж╛ржЬ ржкржбрж╝рзЗ ржирж╛, рждрж╛рж░ ржХрзЛржирзЛ ржЕржЬрзБрж╣рж╛ржд ржирзЗржЗ ЁЯХМ", "ржЖрж▓рзНрж▓рж╛рж╣ рждрж╛ржпрж╝рж╛рж▓рж╛ ржЖржорж╛ржжрзЗрж░ рж╕ржХрж▓рзЗрж░ ржЧрзБржирж╛рж╣ ржорж╛ржл ржХрж░рзБржХ ЁЯд▓", "ржнрж╛ржЗ/ржмрзЛржи, ржжрзБржирж┐ржпрж╝рж╛рж░ ржкрзНрж░рзЗржо ржнрзБрж▓рзЗ ржпрж╛ржи, ржЖрж▓рзНрж▓рж╛рж╣рж░ ржкрзНрж░рзЗржорзЗ ржоржЧрзНржи рж╣ржи ЁЯТЪ"
 ];
 const randomReply = greetings[Math.floor(Math.random() * greetings.length)];
 return api.sendMessage(randomReply, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 });
 }

 if (
 raw.startsWith("baby ") || raw.startsWith("bot ") || raw.startsWith("bby ") ||
 raw.startsWith("jan ") || raw.startsWith("xan ") ||
 raw.startsWith("ржЬрж╛ржи ") || raw.startsWith("ржмржЯ ") || raw.startsWith("ржмрзЗржмрж┐ ")
 ) {
 const query = raw
 .replace(/^baby\s+|^bot\s+|^bby\s+|^jan\s+|^xan\s+|^ржЬрж╛ржи\s+|^ржмржЯ\s+|^ржмрзЗржмрж┐\s+/i, "")
 .trim();
 if (!query) return;

 const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
 const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

 for (const reply of responses) {
 await new Promise((resolve) => {
 api.sendMessage(reply, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 resolve();
 }, event.messageID);
 });
 }
 }
 } catch (err) {
 console.error(err);
 return api.sendMessage(`тЭМ | Error in handleEvent: ${err.message}`, event.threadID, event.messageID);
 }
};
